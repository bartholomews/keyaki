image: docker:19.03.1

variables:
  # When using dind service, we need to instruct docker, to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. docker:19.03.1 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03.1/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Note that if you're using the Kubernetes executor, the variable
  # should be set to tcp://localhost:2376/ because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376/
  #
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:19.03.1-dind

before_script:
  - docker info

stages:
  - test
  - build
  - deploy

test client:
  image: node:11.15.0
  stage: test
  before_script:
    - cd client && yarn install
  cache:
    paths:
      - client/node_modules/
      - client/.yarn
  script:
    - echo "TODO -> yarn test" && ls
  artifacts:
    paths:
      - client/node_modules

build client:
  image: node:11.15.0
  stage: build
  before_script:
    - cd client
  cache:
    paths:
      - client/node_modules/
      - client/.yarn
  script:
    - yarn run prod
  artifacts:
    paths:
      - client/dist

#stack install --test --coverage:
#  image: bartholomews/stack-pg-build:lts-11.10
#  stage: build
##  before_script:
##    - apt-get update
##    - apt-get install -y libpq-dev
##    - cd server
#  cache:
#    paths:
#      - $HOME/.stack
#      - server/.stack-work/
#  script:
#    - stack update
#    - stack install --only-dependencies
#    - stack install --test --coverage
#    - cp /root/.local/bin/keyaki ..
#  artifacts:
#    paths:
#      - keyaki

build server:
  image: fpco/stack-build:lts-11.10
  stage: build
  cache:
    paths:
      - $HOME/.stack
      - server/.stack-work/
  script:
    - stack install --only-dependencies
    - stack install
    - cp /root/.local/bin/keyaki .
  artifacts:
    paths:
      - keyaki

#  before_install:
# Download and unpack the stack executable
#  - mkdir -p ~/.local/bin
#  - export PATH=$HOME/.local/bin:$PATH
#  - travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
#  install:
# Build dependencies
#  - stack --install-ghc test --only-dependencies
#  - stack install weeder hlint

#  script:
# Build the package, its tests, and its code coverage reposrt
#  - stack build --test --coverage
#  - hlint .
#  - weeder .

deploy:
  image: docker:19.03.1
  stage: deploy
  before_script:
    - apk add --update bash py-pip
    - python -m pip install pyyaml
    - docker login --username $DOCKER_USER --password $DOCKER_PASSWORD
  script:
    - docker build -t bartholomews/keyaki -f docker/prod/Dockerfile .
    - ./scripts/deploy-docker-image.sh